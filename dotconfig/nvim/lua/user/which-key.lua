require("which-key").setup({
    plugins = {
        marks = true,
        registers = true,
        spelling = {
            enabled = true,
            suggestions = 20,
        },
        presets = {
            operators = false,
            motions = true,
            text_objects = true,
            windows = true,
            nav = true,
            z = true,
            g = true,
        },
    },
    icons = {
        breadcrumb = "»",
        separator = "➜",
        group = "+",
    },
    popup_mappings = {
        scroll_down = "<c-d>",
        scroll_up = "<c-u>",
    },
    window = {
        border = "rounded",
        position = "bottom",
        margin = { 1, 0, 1, 0 },
        padding = { 2, 2, 2, 2 },
        winblend = 0,
    },
    layout = {
        height = { min = 4, max = 25 },
        width = { min = 20, max = 50 },
        spacing = 3,
        align = "left",
    },
    ignore_missing = true,
    hidden = { "<silent>", "<cmd>", "<Cmd>", "<CR>", "call", "lua", "^:", "^ " },
    show_help = true,
    triggers = "auto",
    triggers_blacklist = {
        i = { "j", "k" },
        v = { "j", "k" },
    },
})

local opts = {
    mode = "n",
    prefix = "<leader>",
    buffer = nil,
    silent = true,
    noremap = true,
    nowait = true,
}

local mappings = {
    ["w"] = { "<cmd>w!<CR>", "Save" },
    ["q"] = { "<cmd>bd<CR>", "Close buffer" },
    ["e"] = { "<cmd>NvimTreeToggle<cr>", "Explorer" },
    ["f"] = { "<cmd>Telescope find_files<cr>", "Find File" },
    ["F"] = { "<cmd>Telescope live_grep<cr>", "Find Text" },
    ["p"] = { "<cmd>Telescope projects<cr>", "Projects" },
    d = {
        name = "Debug",
        d = { "<cmd>lua require('dapui').toggle()<cr>", "Toggle UI" },
    },
    g = {
        name = "Git",
        j = { "<cmd>lua require 'gitsigns'.next_hunk()<cr>", "Next Hunk" },
        k = { "<cmd>lua require 'gitsigns'.prev_hunk()<cr>", "Prev Hunk" },
        l = { "<cmd>lua require 'gitsigns'.blame_line()<cr>", "Blame" },
        p = { "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", "Preview Hunk" },
        r = { "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", "Reset Hunk" },
        R = { "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", "Reset Buffer" },
        s = { "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", "Stage Hunk" },
        u = {
            "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",
            "Undo Stage Hunk",
        },
        o = { "<cmd>Telescope git_status<cr>", "Open changed file" },
        b = { "<cmd>Telescope git_branches<cr>", "Checkout branch" },
        c = { "<cmd>Telescope git_commits<cr>", "Checkout commit" },
    },
    l = {
        name = "Language Server",
        a = { "<cmd>CodeActionMenu<cr>", "Code Action" },
        d = {
            "<cmd>Telescope diagnostics bufnr=0 layout_config={width=0.9}<cr>",
            "Document Diagnostics",
        },
        f = { "<cmd>lua vim.lsp.buf.format<cr>", "Format" },
        i = { "<cmd>LspInfo<cr>", "Info" },
        I = { "<cmd>LspInstall<cr>", "Install New" },
        M = { "<cmd>Mason<cr>", "Mason" },
        j = { "<cmd>lua vim.diagnostic.goto_next()<CR>", "Next Diagnostic" },
        k = { "<cmd>lua vim.diagnostic.goto_prev()<cr>", "Prev Diagnostic" },
        r = { ":IncRename <C-R><C-W>", "Rename" },
        R = { "<cmd>Telescope lsp_references<cr>", "References" },
        T = { "<cmd>Telescope lsp_type_definitions<cr>", "Type Definition" },
        s = { "<cmd>Telescope lsp_document_symbols<cr>", "Document Symbols" },
        S = {
            "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>",
            "Workspace Symbols",
        },
    },
    m = {
        name = "Misc",
        d = { "<cmd>BufferLineSortByDirectory<cr>", "Sort bufferline by dir" },
        e = { "<cmd>BufferLineSortByExtension<cr>", "Sort bufferline by extension" },
        h = { "<cmd>nohl<cr>", "Remove Highligh" },
        i = { "<cmd>PyrightOrganizeImports<cr>", "Pyright organize imports" },
        p = { "<cmd>PackerStatus<cr>", "Installed Packages" },
        r = { "<cmd>luafile $MYVIMRC<cr>", "Reload Neovim config" },
        s = { "<cmd>SymbolsOutline<cr>", "Toggle file symbols" },
        z = { "<cmd>ZenMode<cr>", "Toggle zen mode" },
    },
    s = {
        name = "Search",
        c = { "<cmd>Telescope colorscheme<cr>", "Colorscheme" },
        h = { "<cmd>Telescope help_tags<cr>", "Help tags" },
        m = { "<cmd>Telescope man_pages<cr>", "Man pages" },
        r = { "<cmd>Telescope oldfilese<cr>", "Recent files" },
        R = { "<cmd>Telescope registerse<cr>", "Registers" },
        k = { "<cmd>Telescope keymaps<cr>", "Keymaps" },
    },
    t = {
        name = "Terminal",
        n = { "<cmd>lua _NODE_TOGGLE()<cr>", "Node" },
        p = { "<cmd>lua _PYTHON_TOGGLE()<cr>", "Python" },
        f = { "<cmd>ToggleTerm direction=float<cr>", "Float" },
        h = { "<cmd>ToggleTerm size=10 direction=horizontal<cr>", "Horizontal" },
        v = { "<cmd>ToggleTerm size=80 direction=vertical<cr>", "Vertical" },
    },
    r = {
        name = "Rust",
        r = { "<cmd>RustRunnables<cr>", "Runnables" },
        d = { "<cmd>RustOpenExternalDocs<cr>", "External docs" },
        i = { "<cmd>RustEnableInlineHints<cr>", "Enable inline hints" },
        I = { "<cmd>RustDisableInlineHints<cr>", "Disable inline hints" },
    },
    R = {
        name = "Rust Crates",
        t = { "<cmd>lua require('crates').toggle()<cr>", "Toggle" },
        v = { "<cmd>lua require('crates').show_versions_popup()<cr>", "Show versions" },
        f = { "<cmd>lua require('crates').show_features_popup()<cr>", "Show features" },
        d = { "<cmd>lua require('crates').show_dependencies_popup()<cr>", "Show dependencies" },
        u = { "<cmd>lua require('crates').update_crate()<cr>", "Update crate" },
        U = { "<cmd>lua require('crates').upgrade_crate()<cr>", "Upgrade crate" },
        h = { "<cmd>lua require('crates').open_homepage()<cr>", "Open homepage" },
        D = { "<cmd>lua require('crates').open_documentation()<cr>", "Open documentation" },
        c = { "<cmd>lua require('crates').open_crates_io()<cr>", "Open crates.io" },
    },
    x = {
        name = "Pandoc & Latex",
        p = {
            "<cmd>!pandoc -t beamer --pdf-engine tectonic -o %:r.pdf %<cr>",
            "Compile current file into pdf using Beamer",
        },
    },
}

require("which-key").register(mappings, opts)
